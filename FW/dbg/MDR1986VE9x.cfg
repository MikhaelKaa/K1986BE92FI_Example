source [find target/swj-dp.tcl]

if { [info exists CHIPNAME] } {
   set _CHIPNAME $CHIPNAME
} else {
   set _CHIPNAME MDR1986VE9x
}

if { [info exists ENDIAN] } {
   set _ENDIAN $ENDIAN
} else {
   set _ENDIAN little
}

# Work-area is a space in RAM used for flash programming
if { [info exists WORKAREASIZE] } {
   set _WORKAREASIZE $WORKAREASIZE
} else {
   set _WORKAREASIZE 0x8000
}

# HSI generator clock trimming (BKP_REG_0F.HSI_TRIM[5:0] field)
# When HSITRIM is set to "KEEP", the BKP_REG_0F.HSI_TRIM[5:0] field does not change
if { [info exists HSITRIM] } {
    set _HSITRIM $HSITRIM
} else {
    set _HSITRIM 0x20
}

#jtag scan chain
if { [info exists CPUTAPID] } {
   set _CPUTAPID $CPUTAPID
} else {
   if { [using_jtag] } {
      set _CPUTAPID 0x4ba00477
   } {
      # SWD IDCODE
      set _CPUTAPID 0x2ba01477
   }
}
swj_newdap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID
dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.cpu

set _TARGETNAME $_CHIPNAME.cpu
target create $_TARGETNAME cortex_m -endian $_ENDIAN -dap $_CHIPNAME.dap

$_TARGETNAME configure -work-area-phys 0x20000000 -work-area-size $_WORKAREASIZE -work-area-backup 0

# can't handle overlapping memory regions
if { [info exists IMEMORY] && [string equal $IMEMORY true] } {
   flash bank ${_CHIPNAME}_info.flash mdr 0x08000000 0x01000 0 0 $_TARGETNAME 1 1 4
} else {
   flash bank $_CHIPNAME.flash mdr 0x08000000 0x20000 0 0 $_TARGETNAME 0 32 4
}

# JTAG speed should be <= F_CPU/6. F_CPU after reset is 8MHz, so use F_JTAG = 1MHz
adapter speed 1000

adapter srst delay 100
if {[using_jtag]} {
   jtag_ntrst_delay 100
}

if {![using_hla]} {
   # if srst is not fitted use SYSRESETREQ to
   # perform a soft reset
   cortex_m reset_config sysresetreq
}

proc SetCPUCLK8MHz { TARGETNAME HSITRIM } {
    # Poll the target for its current state
    poll

    if { [$TARGETNAME curstate] eq "halted" } {
        set CPU_CLOCK_ADDR  0x4002000C
        set PER_CLOCK_ADDR  0x4002001C
        set BKP_REG_0E_ADDR 0x400D8038
        set BKP_REG_0F_ADDR 0x400D803C

        # Enable BKP clock in the RST_CLK.PER_CLOCK register
        set PER_CLOCK [read_memory $PER_CLOCK_ADDR 32 1]
        write_memory $PER_CLOCK_ADDR 32 [expr { $PER_CLOCK | (1 << 27) }]

        # Enable HSI generator in the BKP_REG_0F register
        set BKP_REG_0F [read_memory $BKP_REG_0F_ADDR 32 1]
        write_memory $BKP_REG_0F_ADDR 32 [expr { $BKP_REG_0F | (1 << 22) }]

        # Set HSI_TRIM if necessary
        if { !($HSITRIM eq "KEEP") } {
            echo "Info : Target: Set HSI_TRIM = 0x"[format "%02X" $HSITRIM]
            # Write HSITRIM to the BKP_REG_0F.HSI_TRIM[5:0] field
            set BKP_REG_0F [read_memory $BKP_REG_0F_ADDR 32 1]
            set HSITRIM [expr { $HSITRIM & 0x3F }]
            write_memory $BKP_REG_0F_ADDR 32 [expr { ($BKP_REG_0F & ~(0x3F << 24)) | ($HSITRIM << 24) }]
        }

        # Configuration SelectRI[2:0] and LOW[2:0] in the BKP_REG_0E register for clock over 80 MHz
        set BKP_REG_0E [read_memory $BKP_REG_0E_ADDR 32 1]
        write_memory $BKP_REG_0E_ADDR 32 [expr { $BKP_REG_0E | 0x3F }]

        # Set CPU_CLK = HCLK = HSI (~8MHz)
        echo "Info : Target: Set CPU_CLK = HSI = ~8MHz"
        write_memory $CPU_CLOCK_ADDR 32 0x00000000

        # Configuration SelectRI[2:0] and LOW[2:0] in the BKP_REG_0E register for clock up to 10 MHz
        write_memory $BKP_REG_0E_ADDR 32 [expr { $BKP_REG_0E & ~0x3F }]

        # Restore RST_CLK.PER_CLOCK register
        write_memory $PER_CLOCK_ADDR 32 [expr { $PER_CLOCK }]
    }
}

# Setting HSI=8 MHz after reset for correct programming
$_TARGETNAME configure -event reset-end   { SetCPUCLK8MHz $::_TARGETNAME $::_HSITRIM }

# Resume after exiting a debugging session
$_TARGETNAME configure -event gdb-detach  { resume }

init
reset halt

echo "Info : Target: Ready for Remote Connections"
